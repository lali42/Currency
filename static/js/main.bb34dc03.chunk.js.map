{"version":3,"sources":["logo.svg","component/converter/converter.js","App.js","reportWebVitals.js","index.js"],"names":["Converter","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","props","convertHandler","state","fromCurrency","toCurrency","axios","get","then","response","result","amount","data","rates","setState","toFixed","catch","error","console","log","message","selectHandler","event","target","name","value","currencies","currencyAr","key","push","err","className","Grid","container","item","xs","sm","TextField","label","variant","type","this","onChange","FormControl","InputLabel","htmlFor","Select","native","map","cur","Button","color","size","onClick","startIcon","React","Component","defaultOptions","loop","autoplay","animationData","Money","rendererSettings","preserveAspectRatio","App","AppBar","position","Toolbar","Typography","options","height","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb34dc03.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport converter from \"./converter.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Money from \"@material-ui/icons/MonetizationOn\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nclass Converter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      result: null,\r\n      fromCurrency: \"\",\r\n      toCurrency: \"\",\r\n      amount: \"\",\r\n      currencies: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://api.exchangeratesapi.io/latest\")\r\n      .then((response) => {\r\n        const currencyAr = [\"\"];\r\n        for (const key in response.data.rates) {\r\n          currencyAr.push(key);\r\n        }\r\n        this.setState({ currencies: currencyAr });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"oppps\", err);\r\n      });\r\n  }\r\n  convertHandler = () => {\r\n    if (this.state.fromCurrency !== this.state.toCurrency) {\r\n      axios\r\n        .get(\r\n          `https://api.exchangeratesapi.io/latest?rates=${this.state.fromCurrency}&symbols=${this.state.toCurrency}`\r\n        )\r\n        .then((response) => {\r\n          const result =\r\n            this.state.amount * response.data.rates[this.state.toCurrency];\r\n          this.setState({ result: result.toFixed(2) });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Opps\", error.message);\r\n        });\r\n    } else {\r\n      this.setState({ result: \"You cant convert the same currency!\" });\r\n    }\r\n    console.log(this.state.fromCurrency);\r\n    console.log(this.state.toCurrency);\r\n  };\r\n  selectHandler = (event) => {\r\n    if (event.target.name === \"from\") {\r\n      this.setState({ fromCurrency: event.target.value });\r\n    } else {\r\n      if (event.target.name === \"to\") {\r\n        this.setState({ toCurrency: event.target.value });\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Converter\">\r\n        <h2>\r\n          <span>Currency</span> Converter\r\n        </h2>\r\n        <div className=\"From\">\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField\r\n                label=\"AMOUNT\"\r\n                variant=\"outlined\"\r\n                name=\"amount\"\r\n                type=\"number\"\r\n                value={this.state.amount}\r\n                onChange={(event) =>\r\n                  this.setState({ amount: event.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <FormControl className=\"formControl\" variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\">\r\n                  From\r\n                </InputLabel>\r\n                <Select\r\n                  native\r\n                  label=\"FROM\"\r\n                  name=\"from\"\r\n                  onChange={(event) => this.selectHandler(event)}\r\n                  value={this.state.fromCurrency}\r\n                >\r\n                  {this.state.currencies.map((cur) => (\r\n                    <option key={cur}>{cur}</option>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <FormControl className=\"formControl\" variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\">TO</InputLabel>\r\n                <Select\r\n                  native\r\n                  label=\"TO\"\r\n                  name=\"to\"\r\n                  onChange={(event) => this.selectHandler(event)}\r\n                  value={this.state.toCurrency}\r\n                >\r\n                  {this.state.currencies.map((cur) => (\r\n                    <option key={cur}>{cur}</option>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <Button\r\n                className=\"Button\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                onClick={this.convertHandler}\r\n                startIcon={<Money />}\r\n              >\r\n                Convert\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {this.state.result && <h3>{this.state.result}</h3>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Converter;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Convrter from \"./component/converter/converter\";\nimport Lottie from \"react-lottie\";\nimport Money from \"../src/lotties/13398-money-stack.json\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: Money,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\",\n  },\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" className=\"h\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            Currency Converter\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={2} className=\"container\">\n        <Grid>\n          <div item className=\"lotties\">\n            <Lottie options={defaultOptions} height={700} width={700} />\n          </div>\n        </Grid>\n        <Grid item xs={12} sm container>\n          <Convrter />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}